name: _ Build Unity iOS app

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      define_symbols:
        type: string
        description: Scripting Define Symbols
        required: false
        default: "SYMBOL_A;SYMBOL_B;SYMBOL_C;"
      enable_auto_assign_version_code:
        type: string
        description: Use github.run_number as version code
        required: false
        default: "true"
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_LICENSE:
        required: true
      APPLE_DEVELOPER_TEAM_ID:
        required: true
      APPLE_PROVISIONING_PROFILE_ID:
        required: true
      APPLE_PROVISIONING_PROFILE_BASE64:
        required: true
      APPLE_BUILD_CERTIFICATE_P12_BASE64:
        required: true
      APPLE_P12_PASSWORD:
        required: true
      APPLE_KEYCHAIN_PASSWORD:
        required: true
      APPLE_EXPORT_OPTIONS_PLIST_BASE64:
        required: true
      APPLE_CODE_SIGN_IDENTITY:
        required: true

# --------
# Secrets
# --------
#  - UNITY_EMAIL: xxxxx@example.com
#  - UNITY_PASSWORD: xxxxx@example.com's password
#  - UNITY_LICENSE: cat '/Library/Application Support/Unity/Unity_lic.ulf' | pbcopy
#
#  for iOS
#    - APPLE_DEVELOPER_TEAM_ID: ddddddd
#    - APPLE_PROVISIONING_PROFILE_ID: eee-ee-eee-eeee-eeee
#    - APPLE_PROVISIONING_PROFILE_BASE64: $(cat /path/to/ad-hoc.mobileprovision | base64)
#    - APPLE_BUILD_CERTIFICATE_P12_BASE64: $(cat /path/to/cert.p12 | base64)
#    - APPLE_P12_PASSWORD: ffffffffff
#    - APPLE_KEYCHAIN_PASSWORD: gggggggggggg
#    - APPLE_EXPORT_OPTIONS_PLIST_BASE64: $(cat /path/to/ExportOptions.plist | base64)
#    - APPLE_CODE_SIGN_IDENTITY=iPhone Distribution: XXXXXXX (YYYYYYYYY)

jobs:
  build-ios-unity:
    name: Run Unity iOS build
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: ${{ github.event.inputs.enable_ios_build == 'true' }}
    steps:
      - name: Starting job for ${{ inputs.environment }}
        run: |
          echo "enable_auto_assign_version_code: ${{ github.event.inputs.enable_auto_assign_version_code }}"
          echo "define_symbols: ${{ github.event.inputs.define_symbols }}"

      - name: Check out
        uses: actions/checkout@v4

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Use caches
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # @see https://game.ci/docs/github/builder/
      - name: Preparation
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          # @see https://docs.unity3d.com/ScriptReference/BuildTarget.html
          targetPlatform: iOS
          unityVersion: 2021.3.36f1
          buildMethod: K5unity.Editor.CustomBuild.PrepareForApple
          customParameters: -defineSymbols ${{ github.event.inputs.define_symbols }}

      # @see https://game.ci/docs/github/builder/
      - name: Build
        uses: game-ci/unity-builder@v4
        id: buildStep
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          # @see https://docs.unity3d.com/ScriptReference/BuildTarget.html
          targetPlatform: iOS
          unityVersion: 2021.3.36f1
          allowDirtyBuild: true
          buildMethod: K5unity.Editor.CustomBuild.BuildForApple
          customParameters: |
            -appleDeveloperTeamId ${{ secrets.APPLE_DEVELOPER_TEAM_ID }} 
            -provisioningProfileId ${{ secrets.APPLE_PROVISIONING_PROFILE_ID }} 
            -defineSymbols ${{ github.event.inputs.define_symbols }} 
            ${{ github.event.inputs.enable_auto_assign_version_code == 'true' && format('-versionCode {0}', github.run_number) || '' }}

      - name: Show results
        run: |
            echo 'Project Version: ${{ steps.buildStep.outputs.buildVersion }}'
            echo 'Android Version Code: ${{ steps.buildStep.outputs.androidVersionCode }}'
            echo 'Build Step Exit Code: ${{ steps.buildStep.outputs.engineExitCode }}'

      - name: Upload xcode workspace
        uses: actions/upload-artifact@v4
        with:
          name: xcworkspace
          path: |
            XcodeProject
          retention-days: 1

  build-ios-native:
    name: Run iOS Native build
    # https://github.com/actions/runner-images/blob/main/images/macos/macos-14-arm64-Readme.md
    needs: build-ios-unity
    environment: ${{ inputs.environment }}
    if: ${{ github.event.inputs.enable_ios_build == 'true' }}
    runs-on: macos-14
    permissions:
      contents: read
      actions: write
    env:
      DEVELOPER_DIR: /Applications/Xcode_15.4.app
    steps:

      - name: Download xcode workspace
        uses: actions/download-artifact@v4
        with:
          name: xcworkspace

      - name: Setup
        env:
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.APPLE_EXPORT_OPTIONS_PLIST_BASE64 }}
          BUILD_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_P12_BASE64 }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Restore certificate, provisioning profile and export options from secrets
          echo -n "$BUILD_CERTIFICATE_P12_BASE64"   | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          echo -n "$EXPORT_OPTIONS_PLIST_BASE64"    | base64 --decode -o ExportOptions.plist

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Import provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Show Xcode Version
        run: xcodebuild -version

      - name: Xcode Archive
        env:
          APPLE_CODE_SIGN_IDENTITY: ${{ secrets.APPLE_CODE_SIGN_IDENTITY }}
        run: |
          xcodebuild \
            clean archive \
            -project Unity-iPhone.xcodeproj \
            -scheme Unity-iPhone \
            -destination 'generic/platform=iOS' \
            -configuration Release \
            -archivePath ./build/App.xcarchive \
            CODE_SIGN_IDENTITY="${APPLE_CODE_SIGN_IDENTITY}"

      - name: Xcode Export
        run: |
          xcodebuild \
            -exportArchive \
            -archivePath ./build/App.xcarchive  \
            -exportPath ./build  \
            -exportOptionsPlist ExportOptions.plist

      - name: Upload iOS binary
        uses: actions/upload-artifact@v4
        with:
          name: ipa
          path: |
            build/*.ipa
            build/*.dSYM.zip
          retention-days: 3

      - name: Delete Xcode project artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ github.run_id }}
          ARTIFACT_NAME: xcworkspace
        run: |
          ARTIFACT_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${RUN_ID}/artifacts | jq -r ".artifacts[] | select(.name==\"${ARTIFACT_NAME}\") | .id")
          if [ -n "$ARTIFACT_ID" ]; then
            echo "Delete artifact = https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID"
            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ARTIFACT_ID
          else
            echo "No temporary artifact"
          fi