name: Build unity app

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
      define_symbols:
        description: "Scripting Define Symbols"
        required: false
        default: "SYMBOL_A;SYMBOL_B;SYMBOL_C;"
      enable_ios_build:
        type: boolean
        description: Build for iOS
        required: true
        default: true
      enable_android_build:
        type: boolean
        description: Build for Android
        required: true
        default: true

# Secrets:
#  - UNITY_EMAIL: xxxxx@example.com
#  - UNITY_PASSWORD: xxxxx@example.com's password
#  - UNITY_LICENSE: cat '/Library/Application Support/Unity/Unity_lic.ulf' | pbcopy
#  for Android
#    - ANDROID_KEYSTORE_BASE64: cat xxxx.keystore | base64
#    - KEYSTORE_PASS: aaaaaa
#    - KEY_ALIAS_NAME: bbbbbb
#    - KEY_ALIAS_PASS: cccccc
#  for iOS
#    - APPLE_DEVELOPER_TEAM_ID: ddddddd
#    - VPROVISIONING_PROFILE_ID: eee-ee-eee-eeee-eeee

jobs:
  build-android:
    name: Run the Androlid build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: ${{ github.event.inputs.enable_android_build == 'true' }}
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Use caches
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # /Applications/Unity/Hub/Editor/${UNITY_CLI_VERSION}/Unity.app/Contents/MacOS/Unity \
      #   -quit \
      #   -batchmode -executeMethod K5unity.Editor.CustomBuild.PrepareForGoogle \
      #   -logFile ${PROJECT_PATH}/1_prepare_for_google.log \
      #   -projectPath ${PROJECT_PATH} \
      #   -defineSymbols ${SYMBOLS}
      # @see https://game.ci/docs/github/builder/
      - name: Preparation
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          # @see https://docs.unity3d.com/ScriptReference/BuildTarget.html
          targetPlatform: Android
          unityVersion: 2021.3.36f1
          buildMethod: K5unity.Editor.CustomBuild.PrepareForGoogle
          customParameters: -defineSymbols ${{ github.event.inputs.define_symbols }}

      - name: Restore keystore file
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          if [[ -n "$ANDROID_KEYSTORE_BASE64" ]]; then
            echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > build.keystore
          fi

      - name: Test keystore file
        env:
          KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}
          KEY_ALIAS_NAME: ${{ secrets.KEY_ALIAS_NAME }}
        run: |
          keytool -exportcert -alias $KEY_ALIAS_NAME --storepass $KEYSTORE_PASS -keystore build.keystore | openssl sha1 -binary | openssl base64

      # /Applications/Unity/Hub/Editor/${UNITY_CLI_VERSION}/Unity.app/Contents/MacOS/Unity \
      #   -quit \
      #   -batchmode -executeMethod K5unity.Editor.CustomBuild.BuildForGoogle \
      #   -logFile ${PROJECT_PATH}/2_build_for_google.log \
      #   -projectPath ${PROJECT_PATH} \
      #   -keystorePass ${KEYSTORE_PASS} \
      #   -keyAliasName ${KEY_ALIAS_NAME} \
      #   -keyAliasPass ${KEY_ALIAS_PASS} \
      #   -defineSymbols ${SYMBOLS}
      - name: Build
        uses: game-ci/unity-builder@v4
        id: buildStep
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          # @see https://docs.unity3d.com/ScriptReference/BuildTarget.html
          targetPlatform: Android
          unityVersion: 2021.3.36f1
          allowDirtyBuild: true
          buildMethod: K5unity.Editor.CustomBuild.BuildForGoogle
          androidKeystoreName: build.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.KEY_ALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.KEY_ALIAS_PASS }}
          customParameters: "-defineSymbols ${{ github.event.inputs.define_symbols }} -keystoreName build.keystore -keystorePass ${{ secrets.KEYSTORE_PASS }} -keyAliasName ${{ secrets.KEY_ALIAS_NAME }} -keyAliasPass ${{ secrets.KEY_ALIAS_PASS }}"

      - name: list
        run: |
            echo "$ ls"
            ls -al
            echo 'Project Version: ${{ steps.buildStep.outputs.buildVersion }}'
            echo 'Android Version Code: ${{ steps.buildStep.outputs.androidVersionCode }}'
            echo 'Build Step Exit Code: ${{ steps.buildStep.outputs.engineExitCode }}'

      - name: Upload the build result (test 1)
        uses: actions/upload-artifact@v4
        with:
          name: aab-${{ steps.vars.outputs.sha_short }}
          path: "binary.aab"
          retention-days: 5

  build-ios:
    name: Run the iOS build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: ${{ github.event.inputs.enable_ios_build == 'true' }}
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Use caches
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # /Applications/Unity/Hub/Editor/${UNITY_CLI_VERSION}/Unity.app/Contents/MacOS/Unity \
      #   -quit \
      #   -batchmode -executeMethod K5unity.Editor.CustomBuild.PrepareForApple \
      #   -logFile ${PROJECT_PATH}/1_prepare_for_apple.log \
      #   -projectPath ${PROJECT_PATH} \
      #   -defineSymbols ${SYMBOLS}
      # @see https://game.ci/docs/github/builder/
      - name: Preparation
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          # @see https://docs.unity3d.com/ScriptReference/BuildTarget.html
          targetPlatform: iOS
          unityVersion: 2021.3.36f1
          buildMethod: K5unity.Editor.CustomBuild.PrepareForApple
          customParameters: -defineSymbols ${{ github.event.inputs.define_symbols }}

      # /Applications/Unity/Hub/Editor/${UNITY_CLI_VERSION}/Unity.app/Contents/MacOS/Unity \
      #   -quit \
      #   -batchmode -executeMethod K5unity.Editor.CustomBuild.BuildForApple \
      #   -logFile ${PROJECT_PATH}/2_build_for_apple.log \
      #   -projectPath ${PROJECT_PATH} \
      #   -keystorePass ${KEYSTORE_PASS} \
      #   -keyAliasName ${KEY_ALIAS_NAME} \
      #   -keyAliasPass ${KEY_ALIAS_PASS} \
      #   -defineSymbols ${SYMBOLS}
      - name: Build
        uses: game-ci/unity-builder@v4
        id: buildStep
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          # @see https://docs.unity3d.com/ScriptReference/BuildTarget.html
          targetPlatform: iOS
          unityVersion: 2021.3.36f1
          allowDirtyBuild: true
          buildMethod: K5unity.Editor.CustomBuild.BuildForApple
          customParameters: "-appleDeveloperTeamId ${{ secrets.APPLE_DEVELOPER_TEAM_ID }} --provisioningProfileId ${{ secrets.PROVISIONING_PROFILE_ID }} -defineSymbols ${{ github.event.inputs.define_symbols }}"

      - name: list
        run: |
            echo "$ ls"
            ls -al
            cat ProjectSettings/ProjectSettings.asset
            echo 'Project Version: ${{ steps.buildStep.outputs.buildVersion }}'
            echo 'Android Version Code: ${{ steps.buildStep.outputs.androidVersionCode }}'
            echo 'Build Step Exit Code: ${{ steps.buildStep.outputs.engineExitCode }}'
            cat Unity-iPhone.xcodeproj/project.pbxproj | grep 'PROVISIONING_PROFILE_APP'
            cat Unity-iPhone.xcodeproj/project.pbxproj | grep 'DEVELOPMENT_TEAM'
            cat Unity-iPhone.xcodeproj/project.pbxproj | grep -E 'PROVISIONING_PROFILE_APP|DEVELOPMENT_TEAM'

      - name: Upload the build result (test 1)
        uses: actions/upload-artifact@v4
        with:
          name: xcproj-${{ steps.vars.outputs.sha_short }}
          path: "XcodeProject"
          retention-days: 5
